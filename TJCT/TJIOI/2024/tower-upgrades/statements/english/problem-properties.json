{"extraResources":{"example.01.mu":"TVXzATUgMw0KNiAxIDEgMyAyDQoxIDMNCjEgNA0KNCA1DQoyIDQNCg==","example.02.mu":"TVXzATEzIDMxMzQ5NA0KNTggOTYgNDcgMzQgNzkgNDEgNzIgNDggNjAgOCA2MiA1OCA3Nw0KOSAyDQoxMyA0DQo0IDkNCjQgMTINCjExIDINCjUgNw0KOCA1DQo2IDQNCjIgMQ0KMiAzDQoxIDEwDQoxMCA3DQo="},"scoring":null,"notes":"\\begin{center}\n\\includegraphics[scale=0.5]{Drawing-5.sketchpad.png}\n\\end{center}\n\nThe diagram above illustrates the first test case. An optimal set of operations to perform is to upgrade tower $3$ a total of $3$ times, upgrade tower $4$ twice, and upgrade towers $2$ and $5$ once each. This gives us a total cost of $12$, which is the minimum possible. Note that there may be other valid sets of operations with the same minimum cost.","legend":"There is a tree$^\\dagger$ with $n$ nodes. A Cookie Monster with $h$ health will travel through the tree, starting at node $1$. Each node has a tower situated at it, initially with $p_i=0$ power. The Cookie Monster takes $p_i$ damage when visiting $i$ which decreases its health by $p_i$. After taking damage, the Cookie Monster will arbitrarily choose to traverse an edge to an adjacent node which has not been visited yet. \n\nIf after the Cookie Monster takes damage at a node, it has positive health and has no valid moves (all edges at its current node lead to already visited nodes), it wins. You can perform the following operation as many times as you want: increase the $p_i$ by $1$ with a cost of $c_i$. Find the minimum cost needed to guarantee the Cookie Monster cannot win.\n\n$^\\dagger$ A tree is an undirected graph in which there is exactly one simple path connecting any two vertices.","authorLogin":"GabrielXu","language":"english","timeLimit":2000,"output":"Output a single integer \"--- the minimum cost to upgrade the tower so that it is impossible for the Cookie Monster to win.","inputFile":"stdin","outputFile":"stdout","input":"The first line contains two integers $n$ and $h$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le h \\le 10^6$).\n\nThe second line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\le c_i \\le 10^6$) \"--- The cost to upgrade each tower.\n\nThe next $n-1$ lines each contain two integers $u$ and $v$ ($1 \\le u, v \\le n$) \"--- indicating an edge connecting nodes $u$ and $v$.\n\nIt is guaranteed that the given graph forms a tree.","authorName":"Gabriel Xu","sampleTests":[{"output":"12","input":"5 3\n6 1 1 3 2\n1 3\n1 4\n4 5\n2 4\n","inputFile":"example.01","outputFile":"example.01.a"},{"output":"18182652","input":"13 313494\n58 96 47 34 79 41 72 48 60 8 62 58 77\n9 2\n13 4\n4 9\n4 12\n11 2\n5 7\n8 5\n6 4\n2 1\n2 3\n1 10\n10 7\n","inputFile":"example.02","outputFile":"example.02.a"}],"name":"Tower Upgrades","interaction":null,"memoryLimit":536870912,"tutorial":"To ensure we decrease the monsters health by $1$, we can either upgrade the tower it is currently at or perform the optimal combination of upgrades for all the node's children, since we don't know which child it will go to. If the current node is a leaf, then the optimal combination is just upgrading the current node. To compute the answer, we can run a depth first search where we calculate the minimum cost to decrease the monster's health by $1$ by calculating the minimum cost for each node of the tree by comparing it with the sum of the minimum costs for each its children, rooting the tree at node $1$."}
